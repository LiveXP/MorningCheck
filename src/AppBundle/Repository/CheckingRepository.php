<?php

/*
 * This file is part of the Kaazar Project
 *
 * (c) 2017 LiveXP <dev@livexp.fr>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace AppBundle\Repository;

use AppBundle\Entity\Checking;
use AppBundle\Entity\MorningCheck;
use Doctrine\ORM\EntityRepository;

/**
 * CheckingRepository
 *
 * @author Fran√ßois MATHIEU <francois.mathieu@livexp.fr>
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CheckingRepository extends EntityRepository
{
    /**
     * @param MorningCheck $morningCheck
     *
     * @return null|object|Checking
     */
    public function findOneByMorningCheckAndNoStatus(MorningCheck $morningCheck)
    {
        return $this->findOneBy(['morningCheck' => $morningCheck, 'status' => null], ['position' => "ASC"]);
    }

    /**
     * @param MorningCheck $morningCheck
     *
     * @return array|Checking[]
     */
    public function findByMorningCheckAndWithStatus(MorningCheck $morningCheck)
    {
        return $this->createQueryBuilder('q')
            ->where('q.morningCheck = :morningCheck')
            ->andWhere('q.status IS NOT NULL')
            ->setParameter('morningCheck', $morningCheck)
            ->orderBy('q.id', 'ASC')
            ->getQuery()
            ->getResult();
    }

    /**
     * Find and return the last Checking from its name and category name
     *
     * @param string $name
     * @param string $category
     * @param int $current
     *
     * @return Checking|null|object
     */
    public function findLast($name, $category, $current = null)
    {
        if (null === $current) {
            return $this->findOneBy(['name' => $name, 'category' => $category], ['id' => "DESC"]);
        }

        $results = $this->createQueryBuilder('q')
            ->where('q.name = :name')
            ->andWhere('q.id != :id')
            ->andWhere('q.category = :category')
            ->setParameters(['name' => $name, "id" => $current, 'category' => $category])
            ->orderBy('q.id', 'DESC')
            ->getQuery()
            ->getResult();

        return isset($results[0]) ? $results[0] : null;
    }

    /**
     * @param \DateTime $date
     * @return array
     */
    public function findStatsByMonth(\DateTime $date)
    {
        $types = ["OK", "KO"];
        $results = [];
        foreach ($types as $type) {
            $datas = $this->createQueryBuilder('q')
                ->select('morningCheck.name, COUNT(morningCheck.id) nb')
                ->leftJoin("q.morningCheck", 'morningCheck')
                ->leftJoin("q.status", 'status')
                ->where('MONTH(q.date) = :month')
                ->andWhere('YEAR(q.date) = :year')
                ->andWhere('status.name = :name')
                ->groupBy('morningCheck.name')
                ->setParameters(['month' => $date->format("m"), 'year' => $date->format('Y'), 'name' => $type])
                ->getQuery()
                ->getResult();

            foreach ($datas as $data) {
                $results[$data['name']][$type] = $data['nb'];
            }
        }

        return $results;
    }

}
